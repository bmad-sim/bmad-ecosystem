{"beam": {"description": "\nOutput beam parameters that are not in the beam_init structure.\n\nNotes\n-----\nCommand syntax:\n  python beam {ix_uni}@{ix_branch}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\nNote: To set beam_init parameters use the \"set beam\" command.\n\nParameters\n----------\nix_uni : optional\nix_branch : \"\"\n\nReturns\n-------\nstring_list \n\nExamples\n-------- \nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   ix_uni: 1\n   ix_branch: 0\n", "command_str": "python beam {ix_uni}@{ix_branch}", "parameters": ["ix_uni", "ix_branch"]}, "beam_init": {"description": "\nOutput beam_init parameters.\n\nNotes\n-----\nCommand syntax:\n  python beam_init {ix_uni}@{ix_branch}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\nNote: To set beam_init parameters use the \"set beam_init\" command\n\nParameters\n----------\nix_uni : optional\nix_branch : \"\"\n\nReturns\n-------\nstring_list \n\nExamples\n-------- \nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   ix_uni: 1\n   ix_branch: 0\n", "command_str": "python beam_init {ix_uni}@{ix_branch}", "parameters": ["ix_uni", "ix_branch"]}, "bmad_com": {"description": "\nOutput bmad_com structure components.\n\nNotes\n-----\nCommand syntax:\n  python bmad_com\n\nReturns\n-------\nstring_list \n\nExamples\n-------- \nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python bmad_com", "parameters": []}, "branch1": {"description": "\nOutput lattice branch information for a particular lattice branch.\n\nNotes\n-----\nCommand syntax:\n  python branch1 {ix_uni}@{ix_branch}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\nParameters\n----------\nix_uni : \"\"\nix_branch : \"\"\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1\n   ix_branch: 0\n", "command_str": "python branch1 {ix_uni}@{ix_branch}", "parameters": ["ix_uni", "ix_branch"]}, "bunch_comb": {"description": "\nOutputs bunch parameters at a comb point. \nAlso see the \"write bunch_comb\" and \"show bunch -comb\" commands.\n\nNotes\n-----\nCommand syntax:\n  python bunch_comb {flags} {who} {ix_uni}@{ix_branch} {ix_bunch}\n\nWhere:\n  {flags} are optional switches:\n      -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ix_branch} is a branch index. Defaults to s%global%default_branch.\n  {ix_bunch} is the bunch index. Defaults to 1.\n  {who} is one of:\n      x, px, y, py, z, pz, t, s, spin.x, spin.y, spin.z, p0c, beta     -- centroid \n      x.Q, y.Q, z.Q, a.Q, b.Q, c.Q where Q is one of: beta, alpha, gamma, phi, eta, etap,\n                                                                sigma, sigma_p, emit, norm_emit\n    sigma.IJ where I, J in range [1,6]\n    rel_min.I, rel_max.I where I in range [1,6]\n    charge_live, n_particle_live, n_particle_lost_in_ele, ix_ele\n\n  Note: If ix_uni or ix_branch is present, \"@\" must be present.\n\nExample:\n  python bunch_comb py 2@1 1\n\nParameters\n----------\nwho\nix_uni : optional\nix_branch : optional\nix_bunch : default=1\nflags : default=-array_out\n\nReturns\n-------\nstring_list\n  if '-array_out' not in flags\nreal_array\n  if '-array_out' in flags\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   who: x.beta\n", "command_str": "python bunch_comb {flags} {who} {ix_uni}@{ix_branch} {ix_bunch}", "parameters": ["flags", "who", "ix_uni", "ix_branch", "ix_bunch"]}, "bunch_params": {"description": "\nOutputs bunch parameters at the exit end of a given lattice element.\n\nNotes\n-----\nCommand syntax:\n  python bunch_params {ele_id}|{which}\n\nWhere:\n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python bunch_params end|model  ! parameters at model lattice element named \"end\".\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   ele_id: end\n   which: model\n", "command_str": "python bunch_params {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "bunch1": {"description": "\nOutputs Bunch parameters at the exit end of a given lattice element.\n\nNotes\n-----\nCommand syntax:\n  python bunch1 {ele_id}|{which} {ix_bunch} {coordinate}\n\nWhere:\n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {ix_bunch} is the bunch index.\n  {coordinate} is one of: x, px, y, py, z, pz, \"s\", \"t\", \"charge\", \"p0c\", \"state\", \"ix_ele\"\n\nFor example, if {coordinate} = \"px\", the phase space px coordinate of each particle\nof the bunch is displayed. The \"state\" of a particle is an integer. A value of 1 means\nalive and any other value means the particle has been lost.\n\nParameters\n----------\nele_id\ncoordinate\nwhich : default=model\nix_bunch : default=1\n\nReturns\n-------\nreal_array\n  if coordinate in ['x', 'px', 'y', 'py', 'z', 'pz', 's', 't', 'charge', 'p0c']\ninteger_array\n  if coordinate in ['state', 'ix_ele']\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n args:\n   ele_id: end\n   coordinate: x\n   which: model\n   ix_bunch: 1\n", "command_str": "python bunch1 {ele_id}|{which} {ix_bunch} {coordinate}", "parameters": ["ele_id", "which", "ix_bunch", "coordinate"]}, "building_wall_list": {"description": "\nOutput List of building wall sections or section points\n\nNotes\n-----\nCommand syntax:\n  python building_wall_list {ix_section}\n\nWhere:\n  {ix_section} is a building wall section index.\n\nIf {ix_section} is not present, a list of building wall sections is given.\nIf {ix_section} is present, a list of section points is given.\n\nParameters\n----------\nix_section : optional\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n args:\n   ix_section:\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n args:\n   ix_section: 1\n", "command_str": "python building_wall_list {ix_section}", "parameters": ["ix_section"]}, "building_wall_graph": {"description": "\nOutput (x, y) points for drawing the building wall for a particular graph.\n\nNotes\n-----\nCommand syntax:\n  python building_wall_graph {graph}\n\nWhere:\n  {graph} is a plot region graph name.\n\nNote: The graph defines the coordinate system for the (x, y) points.\n\nParameters\n----------\ngraph\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n args:\n   graph: floor_plan.g\n", "command_str": "python building_wall_graph {graph}", "parameters": ["graph"]}, "building_wall_point": {"description": "\nadd or delete a building wall point\n\nNotes\n-----\nCommand syntax:\n  python building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}\n\nWhere:\n  {ix_section}    -- Section index.\n  {ix_point}      -- Point index. Points of higher indexes will be moved up \n                       if adding a point and down if deleting.\n  {z}, etc...     -- See tao_building_wall_point_struct components.\n                  -- If {z} is set to \"delete\" then delete the point.\n\nParameters\n----------\nix_section\nix_point\nz\nx\nradius\nz_center\nx_center\n\nReturns\n-------\nNone \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n args:\n   ix_section: 1\n   ix_point: 1\n   z: 0\n   x: 0\n   radius: 0\n   z_center: 0\n   x_center: 0\n", "command_str": "python building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}", "parameters": ["ix_section", "ix_point", "z", "x", "radius", "z_center", "x_center"]}, "building_wall_section": {"description": "\nAdd or delete a building wall section\n\nNotes\n-----\nCommand syntax:\n  python building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}\n\nWhere:\n  {ix_section}      -- Section index. Sections with higher indexes will be\n                         moved up if adding a section and down if deleting.\n  {sec_name}        -- Section name.\n  {sec_constraint}  -- A section constraint name or \"delete\". Must be one of:\n      delete          -- Delete section. Anything else will add the section.\n      none\n      left_side\n      right_side\n\nParameters\n----------\nix_section\nsec_name\nsec_constraint\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_section: 1\n   sec_name: test\n   sec_constraint: none\n", "command_str": "python building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}", "parameters": ["ix_section", "sec_name", "sec_constraint"]}, "constraints": {"description": "\nOutput optimization data and variable parameters that contribute to the merit function.\n\nNotes\n-----\nCommand syntax:\n  python constraints {who}\n\nWhere:\n  {who} is one of: \"data\" or \"var\"\n\nData constraints output is:\n  data name\n  constraint type\n  evaluation element name\n  start element name\n  end/reference element name\n  measured value\n  ref value (only relavent if global%opt_with_ref = T)\n  model value\n  base value (only relavent if global%opt_with_base = T)\n  weight\n  merit value\n  location where merit is evaluated (if there is a range)\nVar constraints output is:\n  var name\n  Associated varible attribute\n  meas value\n  ref value (only relavent if global%opt_with_ref = T)\n  model value\n  base value (only relavent if global%opt_with_base = T)\n  weight\n  merit value\n  dmerit/dvar\n\nParameters\n----------\nwho\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   who: data\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who:var\n", "command_str": "python constraints {who}", "parameters": ["who"]}, "da_aperture": {"description": "\nOutput dynamic aperture data\n\nNotes\n-----\nCommand syntax:\n  python da_aperture {ix_uni}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\nParameters\n----------\nix_uni : optional\n\nReturns\n-------\nstring_list\n\nExamples\n--------\n", "command_str": "python da_aperture {ix_uni}", "parameters": ["ix_uni"]}, "da_params": {"description": "\nOutput dynamic aperture input parameters\n\nNotes\n-----\nCommand syntax:\n  python da_params {ix_uni}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\nParameters\n----------\nix_uni : optional\n\nReturns\n-------\nstring_list\n\nExamples\n--------\n", "command_str": "python da_params {ix_uni}", "parameters": ["ix_uni"]}, "data": {"description": "\nOutput Individual datum parameters.\n\nNotes\n-----\nCommand syntax:\n  python data {ix_uni}@{d2_name}.{d1_name}[{dat_index}]\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {d2_name} is the name of the d2_data structure the datum is in.\n  {d1_datum} is the name of the d1_data structure the datum is in.\n  {dat_index} is the index of the datum.\n\nUse the \"python data-d1\" command to get detailed info on a specific d1 array.\n\nExample:\n  python data 1@orbit.x[10]\n\nParameters\n----------\nd2_name\nd1_name\nix_uni : optional\ndat_index : default=1\n\nReturns\n-------\nstring_list\n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni:\n   d2_name: twiss\n   d1_name: end \n   dat_index: 1  \n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1\n   d2_name: twiss\n   d1_name: end\n   dat_index: 1\n", "command_str": "python data {ix_uni}@{d2_name}.{d1_name}[{dat_index}]", "parameters": ["ix_uni", "d2_name", "d1_name", "dat_index"]}, "data_d_array": {"description": "\nOutput list of datums for a given d1_data structure.\n\nNotes\n-----\nCommand syntax:\n  python data_d_array {ix_uni}@{d2_name}.{d1_name}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {d2_name} is the name of the containing d2_data structure.\n  {d1_name} is the name of the d1_data structure containing the array of datums.\n\nExample:\n  python data_d_array 1@orbit.x\n\nParameters\n----------\nd2_name\nd1_name\nix_uni : optional\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1 \n   d2_name: twiss\n   d1_name: end\n", "command_str": "python data_d_array {ix_uni}@{d2_name}.{d1_name}", "parameters": ["ix_uni", "d2_name", "d1_name"]}, "data_d1_array": {"description": "\nOutput list of d1 arrays for a given data_d2.\n\nNotes\n-----\nCommand syntax:\n  python data_d1_array {d2_datum}\n\n{d2_datum} should be of the form\n  {ix_uni}@{d2_datum_name}\n\nParameters\n----------\nd2_datum\nix_uni : optional\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1 \n   d2_datum: twiss\n", "command_str": "python data_d1_array {d2_datum}", "parameters": ["d2_datum"]}, "data_d2": {"description": "\nOutput information on a d2_datum.\n\nNotes\n-----\nCommand syntax:\n  python data_d2 {ix_uni}@{d2_name}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {d2_name} is the name of the d2_data structure.\n\nParameters\n----------\nd2_name\nix_uni : optional\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1\n   d2_name: twiss\n", "command_str": "python data_d2 {ix_uni}@{d2_name}", "parameters": ["ix_uni", "d2_name"]}, "data_d2_array": {"description": "\nOutput data d2 info for a given universe.\n\nNotes\n-----\nCommand syntax:\n  python data_d2_array {ix_uni}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\nExample:\n  python data_d2_array 1\n\nParameters\n----------\nix_uni\n\nReturns\n-------\nstring_list  \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni : 1 \n", "command_str": "python data_d2_array {ix_uni}", "parameters": ["ix_uni"]}, "data_d2_create": {"description": "\nCreate a d2 data structure along with associated d1 and data arrays.\n\nNotes\n-----\nCommand syntax:\n  python data_d2_create {ix_uni}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {d2_name} is the name of the d2_data structure to create.\n  {n_d1_data} is the number of associated d1 data structures.\n  {d_data_arrays_name_min_max} has the form\n    {name1}^^{lower_bound1}^^{upper_bound1}^^....^^{nameN}^^{lower_boundN}^^{upper_boundN}\n  where {name} is the data array name and {lower_bound} and {upper_bound} are the bounds of the array.\n\nExample:\n  python data_d2_create 2@orbit^^2^^x^^0^^45^^y^^1^^47\nThis example creates a d2 data structure called \"orbit\" with \ntwo d1 structures called \"x\" and \"y\".\n\nThe \"x\" d1 structure has an associated data array with indexes in the range [0, 45].\nThe \"y\" d1 structure has an associated data arrray with indexes in the range [1, 47].\n\nUse the \"set data\" command to set created datum parameters.\n\nNote: When setting multiple data parameters, \n      temporarily toggle s%global%lattice_calc_on to False\n  (\"set global lattice_calc_on = F\") to prevent Tao trying to \n      evaluate the partially created datum and generating unwanted error messages.\n\nParameters\n----------\nd2_name\nn_d1_data\nd_data_arrays_name_min_max\nix_uni : optional\n   \nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   ix_uni: 1\n   d2_name: orbit\n   n_d1_data: 2 \n   d_data_arrays_name_min_max: x^^0^^45^^y^^1^^47\n", "command_str": "python data_d2_create {ix_uni}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}", "parameters": ["ix_uni", "d2_name", "n_d1_data", "d_data_arrays_name_min_max"]}, "data_d2_destroy": {"description": "\nDestroy a d2 data structure along with associated d1 and data arrays.\n\nNotes\n-----\nCommand syntax:\n  python data_d2_destroy {ix_uni}@{d2_name}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {d2_name} is the name of the d2_data structure to destroy.\n\nExample:\n  python data_d2_destroy 2@orbit\nThis destroys the orbit d2_data structure in universe 2.\n\nParameters\n----------\nd2_name\nix_uni : optional\n   \nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   d2_name: orbit\n", "command_str": "python data_d2_destroy {ix_uni}@{d2_name}", "parameters": ["ix_uni", "d2_name"]}, "data_parameter": {"description": "\nOutput an array of values for a particular datum parameter for a given array of datums, \n\nNotes\n-----\nCommand syntax:\n  python data_parameter {data_array} {parameter}\n\n{parameter} may be any tao_data_struct parameter.\nExample:\n  python data_parameter orbit.x model_value\n\nParameters\n----------\ndata_array\nparameter\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   data_array: twiss.end \n   parameter: model_value\n", "command_str": "python data_parameter {data_array} {parameter}", "parameters": ["data_array", "parameter"]}, "data_set_design_value": {"description": "\nSet the design (and base & model) values for all datums.\n\nNotes\n-----\nCommand syntax:\n  python data_set_design_value\n\nExample:\n  python data_set_design_value\n\nNote: Use the \"data_d2_create\" and \"datum_create\" first to create datums.\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n", "command_str": "python data_set_design_value", "parameters": []}, "datum_create": {"description": "\nCreate a datum.\n\nNotes\n-----\nCommand syntax:\n  python datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^\n                      {ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^\n                      {good_ref}^^{weight}^^{good_user}^^{data_source}^^\n                      {eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^\n                      {spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^\n                      {spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}\n\nNote: The 3 values for spin_axis%n0, as a group, are optional. \n      Also the 3 values for spin_axis%l are, as a group, optional.\nNote: Use the \"data_d2_create\" first to create a d2 structure with associated d1 arrays.\nNote: After creating all your datums, use the \"data_set_design_value\" routine to \n      set the design (and model) values.\n\nParameters\n----------\ndatum_name          ! EG: orb.x[3]\ndata_type           ! EG: orbit.x\nele_ref_name : optional\nele_start_name : optional\nele_name : optional\nmerit_type : optional\nmeas : default=0\ngood_meas : default=F\nref : default=0\ngood_ref : default=F\nweight : default=0\ngood_user : default=T\ndata_source : default=lat\neval_point : default=END\ns_offset : default=0\nix_bunch : default=0\ninvalid_value : default=0\nspin_axis%n0(1) : optional\nspin_axis%n0(2) : optional\nspin_axis%n0(3) : optional\nspin_axis%l(1) : optional\nspin_axis%l(2) : optional\nspin_axis%l(3) : optional\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   datum_name: twiss.end[6]\n   data_type: beta.y\n   ele_ref_name:\n   ele_start_name:\n   ele_name: P1\n   merit_type: target\n   meas: 0\n   good_meas: T\n   ref: 0\n   good_ref: T\n   weight: 0.3\n   good_user: T\n   data_source: lat\n   eval_point: END\n   s_offset: 0\n   ix_bunch: 1\n   invalid_value: 0\n", "command_str": "python datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^{ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^{good_ref}^^{weight}^^{good_user}^^{data_source}^^{eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^{spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^{spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}", "parameters": ["datum_name", "data_type", "ele_ref_name", "ele_start_name", "ele_name", "merit_type", "meas", "good_meas", "ref", "good_ref", "weight", "good_user", "data_source", "eval_point", "s_offset", "ix_bunch", "invalid_value", "spin_axis%n0(1)", "spin_axis%n0(2)", "spin_axis%n0(3)", "spin_axis%l(1)", "spin_axis%l(2)", "spin_axis%l(3)"]}, "datum_has_ele": {"description": "\nOutput whether a datum type has an associated lattice element\n\nNotes\n-----\nCommand syntax:\n  python datum_has_ele {datum_type}\n\nParameters\n----------\ndatum_type\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   datum_type: twiss.end \n", "command_str": "python datum_has_ele {datum_type}", "parameters": ["datum_type"]}, "derivative": {"description": "\nOutput optimization derivatives\n\nNotes\n-----\nCommand syntax:\n  python derivative\n\nNote: To save time, this command will not recalculate derivatives. \nUse the \"derivative\" command beforehand to recalcuate if needed.\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n", "command_str": "python derivative", "parameters": []}, "ele:ac_kicker": {"description": "\nOutput element ac_kicker parameters\n\nNotes\n-----\nCommand syntax:\n  python ele:ac_kicker {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:ac_kicker 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:ac_kicker {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:cartesian_map": {"description": "\nOutput element cartesian_map parameters\n\nNotes\n-----\nCommand syntax:\n  python ele:cartesian_map {ele_id}|{which} {index} {who}\n\nWhere:\n  {ele_id} is an element name or index\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {index} is the index number in the ele%cartesian_map(:) array\n  {who} is one of: \"base\", or \"terms\"\n\nExample:\n  python ele:cartesian_map 3@1>>7|model 2 base\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nindex \nwho\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n args:\n  ele_id: 1@0>>1\n  which: model\n  index: 1\n  who: base\n", "command_str": "python ele:cartesian_map {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:chamber_wall": {"description": "\nOutput element beam chamber wall parameters\n\nNotes\n-----\nCommand syntax:\n  python ele:chamber_wall {ele_id}|{which} {index} {who}\n\nWhere:\n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {index} is index of the wall.\n  {who} is one of:\n    \"x\"       ! Return min/max in horizontal plane\n    \"y\"       ! Return min/max in vertical plane\n\nParameters\n----------\nele_id\nindex\nwho\nwhich : default=model\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d\n args:\n  ele_id: 1@0>>1\n  which: model\n  index: 1\n  who: x\n", "command_str": "python ele:chamber_wall {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:control_var": {"description": "\nOutput list of element control variables.\nUsed for group, overlay and ramper type elements.\n\nNotes\n-----\nCommand syntax:\n  python ele:control_var {ele_id}|{which}\n\nWhere:\n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:control_var 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>873\n  which: model\n", "command_str": "python ele:control_var {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:cylindrical_map": {"description": "\nOutput element cylindrical_map\n\nNotes\n-----\nCommand syntax:\n  python ele:cylindrical_map {ele_id}|{which} {index} {who}\n\nWhere \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {index} is the index number in the ele%cylindrical_map(:) array\n  {who} is one of: \"base\", or \"terms\"\n\nExample:\n  python ele:cylindrical_map 3@1>>7|model 2 base\nThis gives map #2 of element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nindex\nwho\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n args:\n  ele_id: 1@0>>5\n  which: model\n  index: 1\n  who: base\n", "command_str": "python ele:cylindrical_map {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:elec_multipoles": {"description": "\nOutput element electric multipoles\n\nNotes\n-----\nCommand syntax:\n  python ele:elec_multipoles {ele_id}|{which}\n\nWhere:\n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:elec_multipoles 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:elec_multipoles {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:floor": {"description": "\nOutput element floor coordinates. The output gives four lines. \"Reference\" is\nwithout element misalignments and \"Actual\" is with misalignments. The lines with \"-W\"\ngive the W matrix. The exception is that if ele is a multipass_lord, there will be 4*N\nlines where N is the number of slaves.\n\nNotes\n-----\nCommand syntax:\n  python ele:floor {ele_id}|{which} {where}\n\nWhere:\n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {where} is an optional argument which, if present, is one of\n    beginning  ! Upstream end\n    center     ! Middle of element\n    end        ! Downstream end (default)\nNote: {where} ignored for photonic elements crystal, mirror, and multilayer_mirror.\n\nExample:\n  python ele:floor 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\nwhere : default=end\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n  where: \n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n  where: center\n", "command_str": "python ele:floor {ele_id}|{which} {where}", "parameters": ["ele_id", "which", "where"]}, "ele:gen_attribs": {"description": "\nOutput element general attributes\n\nNotes\n-----\nCommand syntax:\n  python ele:gen_attribs {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:gen_attribs 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:gen_attribs {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:gen_grad_map": {"description": "\nOutput element gen_grad_map \n\nNotes\n-----\nCommand syntax:\n  python ele:gen_grad_map {ele_id}|{which} {index} {who}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {index} is the index number in the ele%gen_grad_map(:) array\n  {who} is one of: \"base\", or \"derivs\".\n\nExample:\n  python ele:gen_grad_map 3@1>>7|model 2 base\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nindex\nwho\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n args:\n  ele_id: 1@0>>9\n  which: model\n  index: 1\n  who: derivs\n", "command_str": "python ele:gen_grad_map {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:grid_field": {"description": "\nOutput element grid_field\n\nNotes\n-----\nCommand syntax:\n  python ele:grid_field {ele_id}|{which} {index} {who}\n\nWhere:\n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {index} is the index number in the ele%grid_field(:) array.\n  {who} is one of: \"base\", or \"points\"\n\nExample:\n  python ele:grid_field 3@1>>7|model 2 base\nThis gives grid #2 of element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nindex \nwho \nwhich : default=model\n   \nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_grid\n args:\n  ele_id: 1@0>>1\n  which: model\n  index: 1\n  who: base \n", "command_str": "python ele:grid_field {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "ele:head": {"description": "\nOutput \"head\" Element attributes\n\nNotes\n-----\nCommand syntax:\n  python ele:head {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:head 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id \nwhich : default=model\n\nReturns\n-------\nstring_list \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:head {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:lord_slave": {"description": "\nOutput the lord/slave tree of an element.\n\nNotes\n-----\nCommand syntax:\n  python ele:lord_slave {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:lord_slave 3@1>>7|model\nThis gives lord and slave info on element number 7 in branch 1 of universe 3.\nNote: The lord/slave info is independent of the setting of {which}.\n\nThe output is a number of lines, each line giving information on an element (element index, etc.).\nSome lines begin with the word \"Element\". \nAfter each \"Element\" line, there are a number of lines (possibly zero) that begin with the word \"Slave or \"Lord\".\nThese \"Slave\" and \"Lord\" lines are the slaves and lords of the \"Element\" element.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:lord_slave {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:mat6": {"description": "\nOutput element mat6\n\nNotes\n-----\nCommand syntax:\n  python ele:mat6 {ele_id}|{which} {who}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {who} is one of: \"mat6\", \"vec0\", or \"err\"\n\nExample:\n  python ele:mat6 3@1>>7|model mat6\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\nwho : default=mat6\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n  who: mat6\n", "command_str": "python ele:mat6 {ele_id}|{which} {who}", "parameters": ["ele_id", "which", "who"]}, "ele:methods": {"description": "\nOutput element methods\n\nNotes\n-----\nCommand syntax:\n  python ele:methods {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:methods 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:methods {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:multipoles": {"description": "\nOutput element multipoles\n\nNotes\n-----\nCommand syntax:\n  python ele:multipoles {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:multipoles 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:multipoles {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:orbit": {"description": "\nOutput element orbit\n\nNotes\n-----\nCommand syntax:\n  python ele:orbit {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:orbit 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:orbit {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:param": {"description": "\nOutput lattice element parameter\n\nNotes\n-----\nCommand syntax:\n  python ele:param {ele_id}|{which} {who}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {who} values are the same as {who} values for \"python lat_list\".\n        Note: Here {who} must be a single parameter and not a list.\n\nExample:\n  python ele:param 3@1>>7|model e_tot\nThis gives E_tot of element number 7 in branch 1 of universe 3.\n\nNote: On output the {variable} component will always be \"F\" (since this \ncommand cannot tell if a parameter is allowed to vary).\n\nAlso see: \"python lat_list\".\n\nParameters\n----------\nele_id\nwho \nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon\n args:\n  ele_id: 1@0>>1\n  which: model\n  who: orbit.vec.1\n", "command_str": "python ele:param {ele_id}|{which} {who}", "parameters": ["ele_id", "which", "who"]}, "ele:photon": {"description": "\nOutput element photon parameters\n\nNotes\n-----\nCommand syntax:\n  python ele:photon {ele_id}|{which} {who}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {who} is one of: \"base\", \"material\", or \"curvature\"\n\nExample:\n  python ele:photon 3@1>>7|model base\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwho \nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon\n args:\n  ele_id: 1@0>>1\n  which: model\n  who: base\n", "command_str": "python ele:photon {ele_id}|{which} {who}", "parameters": ["ele_id", "which", "who"]}, "ele:spin_taylor": {"description": "\nOutput element spin_taylor parameters\n\nNotes\n-----\nCommand syntax:\n  python ele:spin_taylor {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:spin_taylor 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_spin\n args:\n  ele_id: 1@0>>2\n  which: model\n", "command_str": "python ele:spin_taylor {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:taylor": {"description": "\nOutput element taylor map \n\nNotes\n-----\nCommand syntax:\n  python ele:taylor {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:taylor 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_taylor\n args:\n  ele_id: 1@0>>34\n  which: model\n", "command_str": "python ele:taylor {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:twiss": {"description": "\nOutput element Twiss parameters\n\nNotes\n-----\nCommand syntax:\n  python ele:twiss {ele_id}|{which}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n\nExample:\n  python ele:twiss 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n  ele_id: 1@0>>1\n  which: model\n", "command_str": "python ele:twiss {ele_id}|{which}", "parameters": ["ele_id", "which"]}, "ele:wake": {"description": "\nOutput element wake.\n\nNotes\n-----\nCommand syntax:\n  python ele:wake {ele_id}|{which} {who}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {Who} is one of:\n      \"sr_long\"        \"sr_long_table\"\n      \"sr_trans\"       \"sr_trans_table\"\n      \"lr_mode_table\"  \"base\"\n\nExample:\n  python ele:wake 3@1>>7|model\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nwho\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wake\n args:\n  ele_id: 1@0>>1\n  which: model\n  who: sr_long\n", "command_str": "python ele:wake {ele_id}|{which} {who}", "parameters": ["ele_id", "which", "who"]}, "ele:wall3d": {"description": "\nOutput element wall3d parameters.\n\nNotes\n-----\nCommand syntax:\n  python ele:wall3d {ele_id}|{which} {index} {who}\n\nWhere: \n  {ele_id} is an element name or index.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {index} is the index number in the ele%wall3d(:) array (size obtained from \"ele:head\").\n  {who} is one of: \"base\", or \"table\".\nExample:\n  python ele:wall3d 3@1>>7|model 2 base\nThis gives element number 7 in branch 1 of universe 3.\n\nParameters\n----------\nele_id\nindex \nwho \nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d\n args:\n  ele_id: 1@0>>1\n  which: model\n  index: 1\n  who: table\n", "command_str": "python ele:wall3d {ele_id}|{which} {index} {who}", "parameters": ["ele_id", "which", "index", "who"]}, "evaluate": {"description": "\nOutput the value of an expression. The result may be a vector.\n\nNotes\n-----\nCommand syntax:\n  python evaluate {flags} {expression}\n\nWhere:\n  Optional {flags} are:\n      -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n  {expression} is expression to be evaluated.\n\nExample:\n  python evaluate 3+data::cbar.11[1:10]|model\n\nParameters\n----------\nexpression :\nflags : default=-array_out\n  If -array_out, the output will be available in the tao_c_interface_com%c_real.\n\nReturns\n-------\nstring_list\n  if '-array_out' not in flags\nreal_array\n  if '-array_out' in flags\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   expression: data::cbar.11[1:10]|model\n", "command_str": "python evaluate {flags} {expression}", "parameters": ["flags", "expression"]}, "em_field": {"description": "\nOutput EM field at a given point generated by a given element.\n\nNotes\n-----\nCommand syntax:\n  python em_field {ele_id}|{which} {x} {y} {z} {t_or_z}\n\nWhere:\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {x}, {y}  -- Transverse coords.\n  {z}       -- Longitudinal coord with respect to entrance end of element.\n  {t_or_z}  -- time or phase space z depending if lattice is setup for absolute time tracking.\n\nParameters\n----------\nele_id\nx\ny\nz\nt_or_z\nwhich : default=model\n   \nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ele_id: 1@0>>22\n   which: model\n   x: 0\n   y: 0\n   z: 0\n   t_or_z: 0\n", "command_str": "python em_field {ele_id}|{which} {x} {y} {z} {t_or_z}", "parameters": ["ele_id", "which", "x", "y", "z", "t_or_z"]}, "enum": {"description": "\nOutput list of possible values for enumerated numbers.\n\nNotes\n-----\nCommand syntax:\n  python enum {enum_name}\n\nExample:\n  python enum tracking_method\n\nParameters\n----------\nenum_name\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   enum_name: tracking_method\n", "command_str": "python enum {enum_name}", "parameters": ["enum_name"]}, "floor_plan": {"description": "\nOutput (x,y) points and other information that can be used for drawing a floor_plan.\n\nNotes\n-----\nCommand syntax:\n  python floor_plan {graph}\n\nParameters\n----------\ngraph\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   graph: r13.g\n", "command_str": "python floor_plan {graph}", "parameters": ["graph"]}, "floor_orbit": {"description": "\nOutput (x, y) coordinates for drawing the particle orbit on a floor plan.\n\nNotes\n-----\nCommand syntax:\n  python floor_orbit {graph}\n\nParameters\n----------\ngraph\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_floor_orbit\n args:\n   graph: r33.g \n", "command_str": "python floor_orbit {graph}", "parameters": ["graph"]}, "global": {"description": "\nOutput global parameters.\n\nNotes\n-----\nCommand syntax:\n  python global\n\nOutput syntax is parameter list form. See documentation at the beginning of this file.\n\nNote: The follow is intentionally left out:\n  optimizer_allow_user_abort\n  quiet\n  single_step\n  prompt_color\n  prompt_string\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python global", "parameters": []}, "global:optimization": {"description": "\nOutput optimization parameters.\nAlso see global:opti_de.\n\nNotes\n-----\nCommand syntax:\n  python global:optimization\n\nOutput syntax is parameter list form. See documentation at the beginning of this file.\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python global:optimization", "parameters": []}, "global:opti_de": {"description": "\nOutput DE optimization parameters.\n\nNotes\n-----\nCommand syntax:\n  python global:opti_de\n\nOutput syntax is parameter list form. See documentation at the beginning of this file.\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python global:opti_de", "parameters": []}, "help": {"description": "\nOutput list of \"help xxx\" topics\n\nNotes\n-----\nCommand syntax:\n  python help\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python help", "parameters": []}, "inum": {"description": "\nOutput list of possible values for an INUM parameter.\nFor example, possible index numbers for the branches of a lattice.\n\nNotes\n-----\nCommand syntax:\n  python inum {who}\n\nParameters\n----------\nwho\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: ix_universe\n", "command_str": "python inum {who}", "parameters": ["who"]}, "lat_calc_done": {"description": "\nOutput if a lattice recalculation has been proformed since the last \n  time \"python lat_calc_done\" was called.\n\nNotes\n-----\nCommand syntax:\n  python lat_calc_done\n\nParameters\n----------\nbranch_name\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   branch_name: 1@0\n", "command_str": "python lat_calc_done", "parameters": []}, "lat_ele_list": {"description": "\nOutput lattice element list.\n\nNotes\n-----\nCommand syntax:\n  python lat_ele_list {branch_name}\n\n{branch_name} should have the form:\n  {ix_uni}@{ix_branch}\n\nParameters\n----------\nbranch_name : optional\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   branch_name: 1@0\n", "command_str": "python lat_ele_list {branch_name}", "parameters": ["branch_name"]}, "lat_branch_list": {"description": "\nOutput lattice branch list\n\nNotes\n-----\nCommand syntax:\n  python lat_branch_list {ix_uni}\n\nOutput syntax:\n  branch_index;branch_name;n_ele_track;n_ele_max\n\nParameters\n----------\nix_uni : optional\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1\n", "command_str": "python lat_branch_list {ix_uni}", "parameters": ["ix_uni"]}, "lat_list": {"description": "\nOutput list of parameters at ends of lattice elements\n\nNotes\n-----\nCommand syntax:\n  python lat_list {flags} {ix_uni}@{ix_branch}>>{elements}|{which} {who}\n\nWhere:\n Optional {flags} are:\n  -no_slaves : If present, multipass_slave and super_slave elements will not be matched to.\n  -track_only : If present, lord elements will not be matched to.\n  -index_order : If present, order elements by element index instead of the standard s-position.\n  -array_out : If present, the output will be available in the tao_c_interface_com%c_real or\n    tao_c_interface_com%c_integer arrays. See the code below for when %c_real vs %c_integer is used.\n    Note: Only a single {who} item permitted when -array_out is present.\n\n  {which} is one of: \"model\", \"base\" or \"design\"\n\n  {who} is a comma deliminated list of:\n    orbit.floor.x, orbit.floor.y, orbit.floor.z    ! Floor coords at particle orbit.\n    orbit.spin.1, orbit.spin.2, orbit.spin.3,\n    orbit.vec.1, orbit.vec.2, orbit.vec.3, orbit.vec.4, orbit.vec.5, orbit.vec.6,\n    orbit.t, orbit.beta,\n    orbit.state,     ! Note: state is an integer. alive$ = 1, anything else is lost.\n    orbit.energy, orbit.pc,\n    ele.name, ele.key, ele.ix_ele, ele.ix_branch\n    ele.a.beta, ele.a.alpha, ele.a.eta, ele.a.etap, ele.a.gamma, ele.a.phi,\n    ele.b.beta, ele.b.alpha, ele.b.eta, ele.b.etap, ele.b.gamma, ele.b.phi,\n    ele.x.eta, ele.x.etap,\n    ele.y.eta, ele.y.etap,\n    ele.ref_time, ele.ref_time_start\n    ele.s, ele.l\n    ele.e_tot, ele.p0c\n    ele.mat6      ! Output: mat6(1,:), mat6(2,:), ... mat6(6,:)\n    ele.vec0      ! Output: vec0(1), ... vec0(6)\n    ele.{attribute} Where {attribute} is a Bmad syntax element attribute. (EG: ele.beta_a, ele.k1, etc.)\n    ele.c_mat     ! Output: c_mat11, c_mat12, c_mat21, c_mat22.\n    ele.gamma_c   ! Parameter associated with coupling c-matrix.\n\n  {elements} is a string to match element names to.\n    Use \"*\" to match to all elements.\n\nExamples:\n  python lat_list -track 3@0>>Q*|base ele.s,orbit.vec.2\n  python lat_list 3@0>>Q*|base real:ele.s    \n\nAlso see: \"python ele:param\"\n\nParameters\n----------\nelements \nwho \nix_uni : optional\nix_branch : optional\nwhich : default=model\nflags : optional, default=-array_out -track_only\n\nReturns\n-------\nstring_list\n  if ('-array_out' not in flags) or (who in ['ele.name', 'ele.key'])\ninteger_array\n   if '-array_out' in flags and who in ['orbit.state', 'ele.ix_ele']\nreal_array\n   if ('-array_out' in flags) or ('real:' in who) \n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1  \n   ix_branch: 0 \n   elements: Q* \n   which: model\n   who: orbit.floor.x\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1  \n   ix_branch: 0 \n   elements: Q* \n   which: design\n   who: ele.ix_ele\n\n\n", "command_str": "python lat_list {flags} {ix_uni}@{ix_branch}>>{elements}|{which} {who}", "parameters": ["flags", "ix_uni", "ix_branch", "elements", "which", "who"]}, "lat_param_units": {"description": "\nOutput units of a parameter associated with a lattice or lattice element.\n\nNotes\n-----\nCommand syntax:\n  python lat_param_units {param_name}\n\nParameters\n----------\nparam_name\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   param_name: L   \n", "command_str": "python lat_param_units {param_name}", "parameters": ["param_name"]}, "matrix": {"description": "\nOutput matrix value from the exit end of one element to the exit end of the other.\n\nNotes\n-----\nCommand syntax:\n  python matrix {ele1_id} {ele2_id}\n\nWhere:\n  {ele1_id} is the start element.\n  {ele2_id} is the end element.\nIf {ele2_id} = {ele1_id}, the 1-turn transfer map is computed.\nNote: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.\n\nExample:\n  python matrix 2@1>>q01w|design q02w\n\nParameters\n----------\nele1_id\nele2_id\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ele1_id: 1@0>>q01w|design\n   ele2_id: q02w\n", "command_str": "python matrix {ele1_id} {ele2_id}", "parameters": ["ele1_id", "ele2_id"]}, "merit": {"description": "\nOutput merit value.\n\nNotes\n-----\nCommand syntax:\n  python merit\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python merit", "parameters": []}, "orbit_at_s": {"description": "\nOutput twiss at given s position.\n\nNotes\n-----\nCommand syntax:\n  python orbit_at_s {ix_uni}@{ele}->{s_offset}|{which}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ele} is an element name or index. Default at the Beginning element at start of branch 0.\n  {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.\n     If {s_offset} is present, the preceeding \"->\" sign must be present. EG: Something like \"23|model\" will\n  {which} is one of: \"model\", \"base\" or \"design\".\n\nExample:\n  python orbit_at_s Q10->0.4|model   ! Orbit at 0.4 meters from Q10 element exit end in model lattice.\n\nParameters\n----------\nix_uni : optional\nele : optional\ns_offset : optional\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1\n   ele: 10\n   s_offset: 0.7\n   which: model\n", "command_str": "python orbit_at_s {ix_uni}@{ele}->{s_offset}|{which}", "parameters": ["ix_uni", "ele", "s_offset", "which"]}, "place_buffer": {"description": "\nOutput the place command buffer and reset the buffer.\nThe contents of the buffer are the place commands that the user has issued.\nSee the Tao manual for more details.\n\nNotes\n-----\nCommand syntax:\n  python place_buffer\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python place_buffer", "parameters": []}, "plot_curve": {"description": "\nOutput curve information for a plot.\n\nNotes\n-----\nCommand syntax:\n  python plot_curve {curve_name}\n\nParameters\n----------\ncurve_name\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   curve_name: r13.g.a\n", "command_str": "python plot_curve {curve_name}", "parameters": ["curve_name"]}, "plot_graph": {"description": "\nOutput graph info.\n\nNotes\n-----\nCommand syntax:\n  python plot_graph {graph_name}\n\n{graph_name} is in the form:\n  {p_name}.{g_name}\nwhere\n  {p_name} is the plot region name if from a region or the plot name if a template plot.\n  This name is obtained from the python plot_list command.\n  {g_name} is the graph name obtained from the python plot1 command.\n\nParameters\n----------\ngraph_name\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   graph_name: beta.g\n", "command_str": "python plot_graph {graph_name}", "parameters": ["graph_name"]}, "plot_histogram": {"description": "\nOutput plot histogram info.\n\nNotes\n-----\nCommand syntax:\n  python plot_histogram {curve_name}\n\nParameters\n----------\ncurve_name\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   curve_name: r33.g.x\n", "command_str": "python plot_histogram {curve_name}", "parameters": ["curve_name"]}, "plot_lat_layout": {"description": "\nOutput plot Lat_layout info\n\nNotes\n-----\nCommand syntax:\n  python plot_lat_layout {ix_uni}@{ix_branch}\n\nNote: The returned list of element positions is not ordered in increasing\n      longitudinal position.\n\nParameters\n----------\nix_uni: 1\nix_branch: 0\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ix_uni: 1\n   ix_branch: 0 \n", "command_str": "python plot_lat_layout {ix_uni}@{ix_branch}", "parameters": ["ix_uni", "ix_branch"]}, "plot_list": {"description": "\nOutput list of plot templates or plot regions.\n\nNotes\n-----\nCommand syntax:\n  python plot_list {r_or_g}\n\nwhere \"{r/g}\" is:\n  \"r\"      ! list regions of the form ix;region_name;plot_name;visible;x1;x2;y1;y2\n  \"t\"      ! list template plots of the form ix;name\n\nParameters\n----------\nr_or_g\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   r_or_g: r\n", "command_str": "python plot_list {r_or_g}", "parameters": ["r_or_g"]}, "plot_template_manage": {"description": "\nTemplate plot creation or destruction.\n\nNotes\n-----\nCommand syntax:\n  python plot_template_manage {template_location}^^{template_name}^^\n                         {n_graph}^^{graph_names}\n\nWhere:\n  {template_location} is the location to place or delete a template plot. Use \"@Tnnn\" syntax for the location.\n  {template_name} is the name of the template plot. If deleting a plot this name is immaterial.\n  {n_graph} is the number of associated graphs. If set to -1 then any existing template plot is deleted.\n  {graph_names} are the names of the graphs.  graph_names should be in the form:\n     graph1_name^^graph2_name^^...^^graphN_name\n  for N=n_graph names\n\nParameters\n----------\ntemplate_location\ntemplate_name\nn_graph : default=-1\ngraph_names : default=\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   template_location: @T1\n   template_name: beta\n   n_graph: 2\n   graph_names: g1^^g2\n", "command_str": "python plot_template_manage {template_location}^^{template_name}^^{n_graph}^^{graph_names}", "parameters": ["template_location", "template_name", "n_graph", "graph_names"]}, "plot_curve_manage": {"description": "\nTemplate plot curve creation/destruction\n\nNotes\n-----\nCommand syntax:\n  python plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}\n\nIf {curve_index} corresponds to an existing curve then this curve is deleted.\nIn this case the {curve_name} is ignored and does not have to be present.\nIf {curve_index} does not not correspond to an existing curve, {curve_index}\nmust be one greater than the number of curves.\n\nParameters\n----------\ngraph_name\ncurve_index\ncurve_name\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   graph_name: beta.g\n   curve_index: 1\n   curve_name: r13.g.a\n", "command_str": "python plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}", "parameters": ["graph_name", "curve_index", "curve_name"]}, "plot_graph_manage": {"description": "\nTemplate plot graph creation/destruction\n\nNotes\n-----\nCommand syntax:\n  python plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}\n\nIf {graph_index} corresponds to an existing graph then this graph is deleted.\nIn this case the {graph_name} is ignored and does not have to be present.\nIf {graph_index} does not not correspond to an existing graph, {graph_index}\nmust be one greater than the number of graphs.\n\nParameters\n----------\nplot_name\ngraph_index\ngraph_name\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   plot_name: beta\n   graph_index: 1\n   graph_name: beta.g\n", "command_str": "python plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}", "parameters": ["plot_name", "graph_index", "graph_name"]}, "plot_line": {"description": "\nOutput points used to construct the \"line\" associated with a plot curve.\n\nNotes\n-----\nCommand syntax:\n  python plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}\n\nOptional {x-or-y} may be set to \"x\" or \"y\" to get the smooth line points x or y \ncomponent put into the real array buffer.\nNote: The plot must come from a region, and not a template, since no template plots \n      have associated line data.\nExamples:\n  python plot_line r13.g.a   ! String array output.\n  python plot_line r13.g.a x ! x-component of line points loaded into the real array buffer.\n  python plot_line r13.g.a y ! y-component of line points loaded into the real array buffer.\n\nParameters\n----------\nregion_name\ngraph_name\ncurve_name\nx_or_y : optional\n\nReturns\n-------\nstring_list\n  if x_or_y == ''\nreal_array\n  if x_or_y != ''\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n args:\n   region_name: beta\n   graph_name: g\n   curve_name: a\n   x_or_y:\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n args:\n   region_name: beta\n   graph_name: g\n   curve_name: a\n   x_or_y: y\n", "command_str": "python plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}", "parameters": ["region_name", "graph_name", "curve_name", "x_or_y"]}, "plot_symbol": {"description": "\nOutput locations to draw symbols for a plot curve.\n\nNotes\n-----\nCommand syntax:\n  python plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}\n\nOptional {x_or_y} may be set to \"x\" or \"y\" to get the symbol x or y \npositions put into the real array buffer.\nNote: The plot must come from a region, and not a template, \n      since no template plots have associated symbol data.\nExamples:\n  python plot_symbol r13.g.a       ! String array output.\n  python plot_symbol r13.g.a x     ! x-component of the symbol positions \n                                     loaded into the real array buffer.\n  python plot_symbol r13.g.a y     ! y-component of the symbol positions \n                                     loaded into the real array buffer.\n\nParameters\n----------\nregion_name\ngraph_name\ncurve_name\nx_or_y\n\nReturns\n-------\nstring_list\n  if x_or_y == ''\nreal_array\n  if x_or_y != ''\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n args:\n   region_name: r13\n   graph_name: g\n   curve_name: a\n   x_or_y: \n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n args:\n   region_name: r13\n   graph_name: g\n   curve_name: a\n   x_or_y: y\n", "command_str": "python plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}", "parameters": ["region_name", "graph_name", "curve_name", "x_or_y"]}, "plot_transfer": {"description": "\nOutput transfer plot parameters from the \"from plot\" to the \"to plot\" (or plots).\n\nNotes\n-----\nCommand syntax:\n  python plot_transfer {from_plot} {to_plot}\n\nTo avoid confusion, use \"@Tnnn\" and \"@Rnnn\" syntax for {from_plot}.\nIf {to_plot} is not present and {from_plot} is a template plot, the \"to plots\" \n are the equivalent region plots with the same name. And vice versa \n if {from_plot} is a region plot.\n\nParameters\n----------\nfrom_plot\nto_plot\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   from_plot: r13\n   to_plot: r23 \n", "command_str": "python plot_transfer {from_plot} {to_plot}", "parameters": ["from_plot", "to_plot"]}, "plot1": {"description": "\nOutput info on a given plot.\n\nNotes\n-----\nCommand syntax:\n  python plot1 {name}\n\n{name} should be the region name if the plot is associated with a region.\nOutput syntax is parameter list form. See documentation at the beginning of this file.\n\nParameters\n----------\nname\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   name: beta\n", "command_str": "python plot1 {name}", "parameters": ["name"]}, "ptc_com": {"description": "\nOutput Ptc_com structure components.\n\nNotes\n-----\nCommand syntax:\n  python ptc_com\n\nReturns\n-------\nstring_list \n\nExamples\n-------- \nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init \n args:\n", "command_str": "python ptc_com", "parameters": []}, "ring_general": {"description": "\nOutput lattice branch with closed geometry info (emittances, etc.)\n\nNotes\n-----\nCommand syntax:\n  python ring_general {ix_uni}@{ix_branch}|{which}\n\nwhere {which} is one of:\n  model\n  base\n  design\nExample:\n  python ring_general 1@0|model\n\nParameters\n----------\nix_uni : optional\nix_branch : optional\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n    ix_uni: 1\n    ix_branch: 0\n    which: model\n\n", "command_str": "python ring_general {ix_uni}@{ix_branch}|{which}", "parameters": ["ix_uni", "ix_branch", "which"]}, "shape_list": {"description": "\nOutput lat_layout or floor_plan shapes list\n\nNotes\n-----\nCommand syntax:\n  python shape_list {who}\n\n{who} is one of:\n  lat_layout\n  floor_plan\n\nParameters\n----------\nwho\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: floor_plan  \n", "command_str": "python shape_list {who}", "parameters": ["who"]}, "shape_manage": {"description": "\nElement shape creation or destruction\n\nNotes\n-----\nCommand syntax:\n  python shape_manage {who} {index} {add_or_delete}\n\n{who} is one of:\n  lat_layout\n  floor_plan\n{add_or_delete} is one of:\n  add     -- Add a shape at {index}. \n             Shapes with higher index get moved up one to make room.\n  delete  -- Delete shape at {index}. \n             Shapes with higher index get moved down one to fill the gap.\n\nExample:\n  python shape_manage floor_plan 2 add\nNote: After adding a shape use \"python shape_set\" to set shape parameters.\nThis is important since an added shape is in a ill-defined state.\n\nParameters\n----------\nwho\nindex\nadd_or_delete\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: floor_plan\n   index: 1\n   add_or_delete: add\n", "command_str": "python shape_manage {who} {index} {add_or_delete}", "parameters": ["who", "index", "add_or_delete"]}, "shape_pattern_list": {"description": "\nOutput list of shape patterns or shape pattern points\n\nNotes\n-----\nCommand syntax:\n  python shape_pattern_list {ix_pattern}\n\nIf optional {ix_pattern} index is omitted then list all the patterns.\nIf {ix_pattern} is present, list points of given pattern.\n\nParameters\n----------\nix_pattern : optional\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n args:\n   ix_pattern: \n", "command_str": "python shape_pattern_list {ix_pattern}", "parameters": ["ix_pattern"]}, "shape_pattern_manage": {"description": "\nAdd or remove shape pattern\n\nNotes\n-----\nCommand syntax:\n  python shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}\n\nWhere:\n  {ix_pattern}      -- Pattern index. Patterns with higher indexes will be moved up \n                                      if adding a pattern and down if deleting.\n  {pat_name}        -- Pattern name.\n  {pat_line_width}  -- Line width. Integer. If set to \"delete\" then section \n                                            will be deleted.\n\nParameters\n----------\nix_pattern\npat_name\npat_line_width\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n args:\n   ix_pattern : 1\n   pat_name : new_pat\n   pat_line_width : 1\n", "command_str": "python shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}", "parameters": ["ix_pattern", "pat_name", "pat_line_width"]}, "shape_pattern_point_manage": {"description": "\nAdd or remove shape pattern point\n\nNotes\n-----\nCommand syntax:\n  python shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}\n\nWhere:\n  {ix_pattern}      -- Pattern index.\n  {ix_point}        -- Point index. Points of higher indexes will be moved up\n                                    if adding a point and down if deleting.\n  {s}, {x}          -- Point location. If {s} is \"delete\" then delete the point.\n\nParameters\n----------\nix_pattern\nix_point\ns\nx\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n args:\n   ix_pattern: 1\n   ix_point: 1\n   s: 0\n   x: 0\n", "command_str": "python shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}", "parameters": ["ix_pattern", "ix_point", "s", "x"]}, "shape_set": {"description": "\nSet lat_layout or floor_plan shape parameters.\n\nNotes\n-----\nCommand syntax:\n  python shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^\n                   {shape_size}^^{type_label}^^{shape_draw}^^\n                   {multi_shape}^^{line_width}\n\n{who} is one of:\n  lat_layout\n  floor_plan\n\nParameters\n----------\nwho\nshape_index\nele_name\nshape\ncolor\nshape_size\ntype_label\nshape_draw\nmulti_shape\nline_width\n\nReturns\n-------\nNone\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: floor_plan\n   shape_index: 1\n   ele_name: Q1\n   shape: circle\n   color:\n   shape_size:\n   type_label:\n   shape_draw:\n   multi_shape:\n   line_width:\n", "command_str": "python shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^{shape_size}^^{type_label}^^{shape_draw}^^{multi_shape}^^{line_width}", "parameters": ["who", "shape_index", "ele_name", "shape", "color", "shape_size", "type_label", "shape_draw", "multi_shape", "line_width"]}, "show": {"description": "\nOutput the output from a show command.\n\nNotes\n-----\nCommand syntax:\n  python show {line}\n\n{line} is the string to pass through to the show command.\nExample:\n  python show lattice -python\n\nParameters\n----------\nline\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   line: -python\n", "command_str": "python show {line}", "parameters": ["line"]}, "space_charge_com": {"description": "\nOutput space_charge_com structure parameters.\n\nNotes\n-----\nCommand syntax:\n  python space_charge_com\n\nOutput syntax is parameter list form. See documentation at the beginning of this file.\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python space_charge_com", "parameters": []}, "species_to_int": {"description": "\nConvert species name to corresponding integer\n\nNotes\n-----\nCommand syntax:\n  python species_to_int {species_str}\n\nExample:\n  python species_to_int CO2++\n\nParameters\n----------\nspecies_str\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   species_str: electron\n", "command_str": "python species_to_int {species_str}", "parameters": ["species_str"]}, "species_to_str": {"description": "\nConvert species integer id to corresponding\n\nNotes\n-----\nCommand syntax:\n  python species_to_str {species_int}\n\nExample:\n  python species_to_str -1     ! Returns 'Electron'\n\nParameters\n----------\nspecies_int\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   species_int: -1\n", "command_str": "python species_to_str {species_int}", "parameters": ["species_int"]}, "spin_invariant": {"description": "\nOutput closed orbit spin axes n0, l0, or m0 at the ends of all lattice elements in a branch.\nn0, l0, and m0 are solutions of the T-BMT equation.\nn0 is periodic while l0 and m0 are not. At the beginning of the branch, the orientation of the \nl0 or m0 axes in the plane perpendicular to the n0 axis is chosen a bit arbitrarily.\nSee the Bmad manual for more details.\n\nNotes\n-----\nCommand syntax:\n  python spin_invariant {flags} {who} {ix_uni}@{ix_branch}|{which}\n\nWhere:\n  {flags} are optional switches:\n      -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n  {who} is one of: l0, n0, or m0\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ix_branch} is a branch index. Defaults to s%global%default_branch.\n  {which} is one of:\n    model\n    base\n    design\n\nExample:\n  python spin_invariant 1@0|model\n\nNote: This command is under development. If you want to use please contact David Sagan.\n\nParameters\n----------\nwho\nix_uni : optional\nix_branch : optional\nwhich : default=model\nflags : default=-array_out\n\nReturns\n-------\nstring_list\n  if '-array_out' not in flags\nreal_array\n  if '-array_out' in flags\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n   who: l0\n   ix_uni: 1\n   ix_branch: 0\n   which: model\n", "command_str": "python spin_invariant {flags} {who} {ix_uni}@{ix_branch}|{which}", "parameters": ["flags", "who", "ix_uni", "ix_branch", "which"]}, "spin_polarization": {"description": "\nOutput spin polarization information\n\nNotes\n-----\nCommand syntax:\n  python spin_polarization {ix_uni}@{ix_branch}|{which}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ix_branch} is a branch index. Defaults to s%global%default_branch.\n  {which} is one of:\n    model\n    base\n    design\n\nExample:\n  python spin_polarization 1@0|model\n\nNote: This command is under development. If you want to use please contact David Sagan.\n\nParameters\n----------\nix_uni : optional\nix_branch : optional\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n   ix_uni: 1\n   ix_branch: 0\n   which: model\n", "command_str": "python spin_polarization {ix_uni}@{ix_branch}|{which}", "parameters": ["ix_uni", "ix_branch", "which"]}, "spin_resonance": {"description": "\nOutput spin resonance information\n\nNotes \n-----\nCommand syntax:\n  python spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n  {which} is one of: \"model\", \"base\" or \"design\"\n  {ref_ele} is an element name or index.\nThis will return a string_list with the following fields:\n  spin_tune                   -- Spin tune\n  dq_X_sum, dq_X_diff         -- Tune sum Q_spin+Q_mode and tune difference Q_spin-Q_mode for modes X = a, b, and c.\n  xi_res_X_sum, xi_res_X_diff -- The linear spin/orbit sum and difference resonance strengths for X = a, b, and c modes.  \n\nParameters\n----------\nix_uni : optional\nix_branch : optional\nwhich : default=model\nref_ele : default=0\n  Reference element to calculate at.\n\nReturns\n-------\nstring_list  \n\nExamples\n--------\n\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n   ix_uni: 1\n   ix_branch: 0\n   which: model\n", "command_str": "python spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}", "parameters": ["ix_uni", "ix_branch", "which", "ref_ele"]}, "super_universe": {"description": "\nOutput super_Universe parameters.\n\nNotes\n-----\nCommand syntax:\n  python super_universe\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n", "command_str": "python super_universe", "parameters": []}, "taylor_map": {"description": "\nOutput Taylor map between two points.\n\nNotes\n-----\nCommand syntax:\n  python taylor_map {ele1_id} {ele2_id} {order}\n\nWhere:\n  {ele1_id} is the start element.\n  {ele2_id} is the end element.\n  {order} is the map order. Default is order set in the lattice file. {order} cannot be larger than \n        what is set by the lattice file. \nIf {ele2_id} = {ele1_id}, the 1-turn transfer map is computed.\nNote: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.\nExample:\n  python taylor_map 2@1>>q01w|design q02w  2\n\nParameters\n----------\nele1_id \nele2_id \norder : default=1\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   ele1_id: 1@0>>q01w|design\n   ele2_id: q02w\n   order: 1\n", "command_str": "python taylor_map {ele1_id} {ele2_id} {order}", "parameters": ["ele1_id", "ele2_id", "order"]}, "twiss_at_s": {"description": "\nOutput twiss parameters at given s position.\n\nNotes\n-----\nCommand syntax:\n  python twiss_at_s {ix_uni}@{ele}->{s_offset}|{which}\n\nWhere:\n  {ix_uni} is a universe index. Defaults to s%global%default_universe.\n  {ele} is an element name or index. Default at the Beginning element at start of branch 0.\n  {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.\n     If {s_offset} is present, the preceeding \"->\" sign must be present. EG: Something like \"23|model\" will\n  {which} is one of: \"model\", \"base\" or \"design\".\n\nParameters\n----------\nix_uni : optional\nele : optional\ns_offset : optional\nwhich : default=model\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n   ix_uni: 1\n   ele: 10\n   s_offset: 0.7\n   which: model \n", "command_str": "python twiss_at_s {ix_uni}@{ele}->{s_offset}|{which}", "parameters": ["ix_uni", "ele", "s_offset", "which"]}, "universe": {"description": "\nOutput universe info.\n\nNotes\n-----\nCommand syntax:\n  python universe {ix_uni}\n\nUse \"python global\" to get the number of universes.\n\nParameters\n----------\nix_uni\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args: \n   ix_uni: 1\n", "command_str": "python universe {ix_uni}", "parameters": ["ix_uni"]}, "var": {"description": "\nOutput parameters of a given variable.\n\nNotes\n-----\nCommand syntax:\n  python var {var} {slaves}\n\nNote: use \"python var_general\" to get a list of variables.\n\nParameters\n----------\nvar\nslaves : optional\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args: \n   var: quad[1]\n   slaves:\n\nExample: 2\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args: \n   var: quad[1]\n   slaves: slaves\n", "command_str": "python var {var} {slaves}", "parameters": ["var", "slaves"]}, "var_create": {"description": "\nCreate a single variable\n\nNotes\n-----\nCommand syntax:\n  python var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^\n                    {weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^\n                    {good_user}^^{key_bound}^^{key_delta}\n\n{var_name} is something like \"kick[5]\".\nBefore using var_create, setup the appropriate v1_var array using \nthe \"python var_v1_create\" command.\n\nParameters\n----------\nvar_name\nele_name\nattribute\nuniverses\nweight\nstep\nlow_lim\nhigh_lim\nmerit_type\ngood_user\nkey_bound\nkey_delta\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n args:\n   var_name: quad[1]\n   ele_name: Q1\n   attribute: L\n   universes: 1\n   weight: 0.001\n   step: 0.001\n   low_lim: -10\n   high_lim: 10\n   merit_type: \n   good_user: T\n   key_bound: T\n   key_delta: 0.01 \n", "command_str": "python var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^{weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^{good_user}^^{key_bound}^^{key_delta}", "parameters": ["var_name", "ele_name", "attribute", "universes", "weight", "step", "low_lim", "high_lim", "merit_type", "good_user", "key_bound", "key_delta"]}, "var_general": {"description": "\nOutput list of all variable v1 arrays\n\nNotes\n-----\nCommand syntax:\n  python var_general\n\nOutput syntax:\n  {v1_var name};{v1_var%v lower bound};{v1_var%v upper bound}\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n", "command_str": "python var_general", "parameters": []}, "var_v_array": {"description": "\nOutput list of variables for a given data_v1.\n\nNotes\n-----\nCommand syntax:\n  python var_v_array {v1_var}\n\nExample:\n  python var_v_array quad_k1\n\nParameters\n----------\nv1_var\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   v1_var: quad_k1\n", "command_str": "python var_v_array {v1_var}", "parameters": ["v1_var"]}, "var_v1_array": {"description": "\nOutput list of variables in a given variable v1 array\n\nNotes\n-----\nCommand syntax:\n  python var_v1_array {v1_var}\n\nParameters\n----------\nv1_var\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   v1_var: quad_k1 \n", "command_str": "python var_v1_array {v1_var}", "parameters": ["v1_var"]}, "var_v1_create": {"description": "\nCreate a v1 variable structure along with associated var array.\n\nNotes\n-----\nCommand syntax:\n  python var_v1_create {v1_name} {n_var_min} {n_var_max}\n\n{n_var_min} and {n_var_max} are the lower and upper bounds of the var\nExample:\n  python var_v1_create quad_k1 0 45\nThis example creates a v1 var structure called \"quad_k1\" with an associated\nvariable array that has the range [0, 45].\n\nUse the \"set variable\" command to set a created variable parameters.\nIn particular, to slave a lattice parameter to a variable use the command:\n  set {v1_name}|ele_name = {lat_param}\nwhere {lat_param} is of the form {ix_uni}@{ele_name_or_location}{param_name}]\nExamples:\n  set quad_k1[2]|ele_name = 2@q01w[k1]\n  set quad_k1[2]|ele_name = 2@0>>10[k1]\nNote: When setting multiple variable parameters, \n      temporarily toggle s%global%lattice_calc_on to False\n  (\"set global lattice_calc_on = F\") to prevent Tao trying to evaluate the \npartially created variable and generating unwanted error messages.\n\nParameters\n----------\nv1_name\nn_var_min\nn_var_max\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   v1_name: quad_k1 \n   n_var_min: 0 \n   n_var_max: 45 \n", "command_str": "python var_v1_create {v1_name} {n_var_min} {n_var_max}", "parameters": ["v1_name", "n_var_min", "n_var_max"]}, "var_v1_destroy": {"description": "\nDestroy a v1 var structure along with associated var sub-array.\n\nNotes\n-----\nCommand syntax:\n  python var_v1_destroy {v1_datum}\n\nParameters\n----------\nv1_datum\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   v1_datum: quad_k1\n", "command_str": "python var_v1_destroy {v1_datum}", "parameters": ["v1_datum"]}, "wave": {"description": "\nOutput Wave analysis info.\n\nNotes\n-----\nCommand syntax:\n  python wave {who}\n\nWhere {who} is one of:\n  params\n  loc_header\n  locations\n  plot1, plot2, plot3\n\nParameters\n----------\nwho\n\nReturns\n-------\nstring_list\n\nExamples\n--------\nExample: 1\n init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n args:\n   who: params\n", "command_str": "python wave {who}", "parameters": ["who"]}}